import cv2
import numpy as np

# Load the binary image (0 and 255 values only)
image = cv2.imread('your_binary_image.jpg', cv2.IMREAD_GRAYSCALE)

# Ensure the image is binary
_, binary = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)

# Divide the image into left and right parts
height, width = binary.shape
left_half = binary[:, :width // 2]
right_half = binary[:, width // 2:]

# Function to find and keep the most significant patch that is vertically aligned directly
def keep_significant_patches_direct_overlap(part, keep_left=True, min_distance=5):
    """
    Parameters:
    - part: The half image to process.
    - keep_left: Whether to keep the leftmost or rightmost patches.
    - min_distance: The minimum distance between patches to consider them separate.
    """
    # Find all connected components
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(part, connectivity=8)

    # Initialize the mask for significant patches
    significant_mask = np.zeros_like(part)

    # Sort components based on the x-coordinate of the bounding box
    if keep_left:
        # Sort by the leftmost x-coordinate (smallest to largest)
        sorted_indices = np.argsort(stats[:, cv2.CC_STAT_LEFT])
    else:
        # Sort by the rightmost x-coordinate (largest to smallest)
        sorted_indices = np.argsort(stats[:, cv2.CC_STAT_LEFT] + stats[:, cv2.CC_STAT_WIDTH])[::-1]

    # List to store bounding boxes of vertically aligned patches
    aligned_boxes = []

    # Iterate through sorted components
    for i in sorted_indices:
        if i == 0:  # Skip the background
            continue

        # Get bounding box of the component
        x, y, w, h, area = stats[i]

        # Check if the component is directly vertically aligned with any previously found patch
        is_aligned = False
        for bx, by, bw, bh in aligned_boxes:
            # Check for direct vertical overlap in the x-coordinate range
            if x < bx + bw and bx < x + w:
                is_aligned = True
                break
            # Also, check if the current component is too close horizontally to any previously kept component
            elif abs(x - bx) <= min_distance or abs((x + w) - (bx + bw)) <= min_distance:
                is_aligned = True
                break

        # If aligned or the first component, add to significant mask and update the bounding boxes
        if not is_aligned:
            aligned_boxes.append((x, y, w, h))
            significant_mask[labels == i] = 255

            # Remove all pixels to the right (if left part) or left (if right part)
            if keep_left:
                part[:, x + w:] = 0  # Remove pixels to the right
            else:
                part[:, :x] = 0  # Remove pixels to the left

    return significant_mask

# Process the left half to keep all vertically aligned patches or lines
left_significant = keep_significant_patches_direct_overlap(left_half, keep_left=True, min_distance=5)

# Process the right half to keep all vertically aligned patches or lines
right_significant = keep_significant_patches_direct_overlap(right_half, keep_left=False, min_distance=5)

# Combine the two parts
result = np.zeros_like(binary)
result[:, :width // 2] = left_significant
result[:, width // 2:] = right_significant

# Display the final result
cv2.imshow('Result', result)
cv2.waitKey(0)
cv2.destroyAllWindows()
